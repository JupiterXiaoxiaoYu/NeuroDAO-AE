@compiler >= 6

include "List.aes"

main contract NeuroDAOFactory = 
    record daoData = {
        daoTokenAdress : address,
        name: string,
        description: string,
        id: int
        }

    record state = {
        daoContractAndData : map(address, daoData),
        reputationContractAddress : address,
        investmentSwapServiceAddress : address,
        daoTemplateAddress : address,
        daoTokenTemplateAddress: address,
        numberOfDAOs : int
        }

    stateful entrypoint init() = 
        let repu = Chain.create(Contract.address): Reputation
        let swap = Chain.create(Contract.address): Swap
        let daoTemplate = Chain.create("TP", "TP", "TP", "TP", 3, Contract.address, 3, 3, 3, 3, false, Contract.address): NeuroDAO
        let daoTokenTemplate = Chain.create("TP", 3, "TP", None): DAOToken
        {
            daoContractAndData = {},
            reputationContractAddress = repu.address,
            investmentSwapServiceAddress = swap.address,
            numberOfDAOs = 0,
            daoTemplateAddress = daoTemplate.address,
            daoTokenTemplateAddress = daoTokenTemplate.address
            }
            
    stateful entrypoint createDAOContract(name' : string, description' : string,
                tokenName : string, tokenSymbol : string, tokenDecimals: int, factoryAddress' : address,
                layersNum' : int, inputNodesNum' : int, hiddenNodesNum' : int,
                outputNodesNum' : int, responsibilityOverlap' : bool) : address =
        let templateDAO: NeuroDAO = Address.to_contract(state.daoTemplateAddress)
        let dao = Chain.clone(ref=templateDAO, name', description', tokenName, tokenSymbol, tokenDecimals, Contract.address, layersNum', inputNodesNum', hiddenNodesNum', outputNodesNum', responsibilityOverlap', state.daoTokenTemplateAddress): NeuroDAO
        let daoAddress = dao.address
        let initialDAOData: daoData = {daoTokenAdress=dao.getDAOTokenAddress(), name=name', description = description', id= state.numberOfDAOs}
        put(state{ daoContractAndData[daoAddress] = initialDAOData, numberOfDAOs @prev = prev + 1 })
        daoAddress

    entrypoint getAlldaoData(daoAddress : address) : list(address * daoData) =
        Map.to_list(state.daoContractAndData)

    entrypoint getdaoData(daoAddress : address) : daoData =
        switch(Map.lookup(daoAddress, state.daoContractAndData))
            None => abort("DAO not found")
            Some(x) => x

    entrypoint getTemplateDAOAddress() : address =
        state.daoTemplateAddress

    entrypoint getTemplateDAOTokenAddress(): address =
        state.daoTokenTemplateAddress
