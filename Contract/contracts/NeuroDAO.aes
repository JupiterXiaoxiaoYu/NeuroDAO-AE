
@compiler >= 6

include "String.aes"
include "./DAOToken.aes"
include "./Reputation.aes"
include "./Swap.aes"
// include "./DEXInterface.aes"
include "String.aes"


main contract NeuroDAO =
    datatype voteOption = Agree | Against | Abstain

    record voteInfo = {
        deposit: int,
        vote: voteOption,
        info: string
        }

    record voteForDecision = {
        deposit: int,
        vote: voteOption
        // proposedBuyTime: int,
        // proposedSellTime: int,
        // investmentPercent: int
        }

    datatype proposalStage =
         InputDecision
        | HiddenDecision
        | OutputDecision
        | WaitForBuyStart
        | ExecuteBuy
        | WaitForSellStart
        | ExecuteSell
        | Executed
        | Rejected

    // datatype error = 
    //     NotFactoryAddress | NotMember | NotInputNode | NotHiddenNode | NotOutputNode | NotLpNode
    //     | NotSufficientFund | NotSufficientStake 
    //     | InvalidStageOfAction | CannotDepositAfterBuyExecuted | NotActiveProposal 

    record metaInfo = {
        owner : address,
        name : string,
        description : string,
        daoTokenAdress : address
        }

    record neuralNetwork = {
        layersNum : int,
        inputNodesNum : int,
        hiddenNodesNum : int,
        outputNodesNum : int,
        responsibilityOverlap : bool,
        maxNodesPerLayer : int
        }

    record state = { 
        factoryAddress : address,
        metaInfo: metaInfo,
        neuralNetwork: neuralNetwork,
        stakers : map(address, int),
        proposals : map(int, proposal),
        inputNodes: map(address, int),
        hiddenNodes: map(address, int),
        outputNodes: map(address, int),
        lpNodes: map(address, int),
        investmentSwapService: address
        }


    stateful entrypoint init(name' : string, description' : string,
                   tokenName : string, tokenSymbol : string, tokenDecimals: int, founderAddress' : address,
                   layersNum' : int, inputNodesNum' : int, hiddenNodesNum' : int,
                   outputNodesNum' : int, responsibilityOverlap' : bool, templateTokenAddress: address, investmentSwapService': address) = 
        let token : DAOToken = Address.to_contract(templateTokenAddress)
        let newToken = Chain.clone(ref=token, tokenName, tokenDecimals, tokenSymbol, Some(0)) : DAOToken
        { 
          metaInfo = {owner = founderAddress', name = name', description = description', daoTokenAdress = newToken.address}, //
          investmentSwapService = investmentSwapService', //
          factoryAddress = Call.caller,
          neuralNetwork = { layersNum = layersNum', inputNodesNum = inputNodesNum',hiddenNodesNum = hiddenNodesNum',outputNodesNum = outputNodesNum',responsibilityOverlap = responsibilityOverlap',maxNodesPerLayer = 10},
          stakers = {},
          inputNodes = {},
          hiddenNodes = {},
          outputNodes = {},
          lpNodes = {},
          proposals = {}
          }

    entrypoint getProposals() = 
        state.proposals

    entrypoint getInvestmentSwapServiceAddress() = 
        state.investmentSwapService

    entrypoint getTokenMetadata() = 
        let token: DAOToken = Address.to_contract(state.metaInfo.daoTokenAdress)
        token.meta_info()

    entrypoint getTokenTotalSupply() = 
        let token: DAOToken = Address.to_contract(state.metaInfo.daoTokenAdress)
        token.total_supply()

    entrypoint getProposalByIndex(index: int) = 
        switch(Map.lookup(index, state.proposals))
            None => abort("No proposal found")
            Some(x) => x

    entrypoint getMetaInfo() = 
        state.metaInfo

    entrypoint getNeuralNetworkInfo() = 
        state.neuralNetwork

    entrypoint getStakers() = 
        state.stakers

    entrypoint getDAOTokenBalance(member: address): int = 
        let token: DAOToken = Address.to_contract(state.metaInfo.daoTokenAdress)
        switch(token.balance(member))
            None => 0
            Some(x) => x

    //authorities requirements
    function factoryAddressOnly() = 
        require(state.factoryAddress == Contract.address, "NotFactoryAddress")

    function memberOnly() = 
        require(Map.member(Call.caller, state.inputNodes)||Map.member(Call.caller, state.hiddenNodes) || Map.member(Call.caller, state.outputNodes) || Map.member(Call.caller,state.lpNodes), "NotMember")

    function inputNodeOnly() = 
        require(Map.member(Call.caller, state.inputNodes), "NotInputNode")

    function hiddenNodeOnly() = 
        require(Map.member(Call.caller, state.hiddenNodes), "NotHiddenNode")

    function outputNodeOnly() =
        require(Map.member(Call.caller, state.outputNodes), "NotOutputNode")

    function lpNodeOnly() =
        require(Map.member(Call.caller, state.lpNodes), "NotLpNode")

    function inputNodeSpareOnly() = 
        require(Map.size(state.inputNodes) < state.neuralNetwork.inputNodesNum, "NoSpareInputNode")

    function hiddenNodeSpareOnly() =
        require(Map.size(state.hiddenNodes) < state.neuralNetwork.hiddenNodesNum, "NoSpareHiddenNode")
    
    function outputNodeSpareOnly() =
        require(Map.size(state.outputNodes) < state.neuralNetwork.outputNodesNum, "NoSpareOutputNode")

    function responsibilityOverlapOnly() =
        require(state.neuralNetwork.responsibilityOverlap == true, "NoResponsibilityOverlap")

    //monetary requirements
    function sufficientFundOnly() = 
        require(Chain.balance(Call.caller) > Call.value , "NotSufficientFund")

    function sufficientStakeOnly(stake: int ) = 
        require(state.stakers[Call.caller=0] >= stake, "NotSufficientStake")

    function sufficientDeposotOnly(deposit: int) =
        let token: DAOToken = Address.to_contract(state.metaInfo.daoTokenAdress)
        switch(token.balance(Call.caller))
            None => abort("No token")
            Some(x) => 
                require(x>=deposit, "NotEnoughDeposit")
                token.transferUnderDAO(Call.caller, Contract.address, deposit)

    entrypoint getTimeStamp(): int = 
        Chain.timestamp 
    
    //proposal stage requirements
    stateful function inputDecisionStageOnly(proposalIndex: int) = 
        require(getCurrentStage(proposalIndex) == InputDecision, "InvalidStageOfAction,inputDecisionStageOnly")

    stateful function hiddenDecisionStageOnly(proposalIndex: int) = 
        require(getCurrentStage(proposalIndex) == HiddenDecision, "InvalidStageOfAction,hiddenDecisionStageOnly")

    stateful function outputDecisionStageOnly(proposalIndex: int) = 
        require(getCurrentStage(proposalIndex) == OutputDecision, "InvalidStageOfAction,outputDecisionStageOnly")

    function beforeBuyExecutedOnly(proposalIndex: int) = 
        require(state.proposals[proposalIndex].buyBalance == 0, "CannotDepositAfterBuyExecuted")

    function activeProposalOnly(proposalIndex: int) = 
        require(state.proposals[proposalIndex].stage != Executed, "NotActiveProposal")

    function rejectedProposalOnly(proposalIndex: int) = 
        require(state.proposals[proposalIndex].stage == Rejected, "NotRejectedProposal")

    // function afterExecuteBuyTimeOnly(proposalIndex: int) = 
    //     require(getCurrentStage(proposalIndex) == ExecuteBuy, "NotReachTheBuyTime")

    function afterExecuteBuyTimeOnly(proposalIndex: int) = 
        require(state.proposals[proposalIndex].executeBuyAfter =< Chain.timestamp, "NotReachTheBuyTime")

    function afterExecuteSellTimeOnly(proposalIndex: int) =
        require(state.proposals[proposalIndex].executeSellAfter =< Chain.timestamp, "NotReachTheSellTime")

    //Membership checks
    public entrypoint isMember(node: address) : bool =
        Map.member(node, state.inputNodes) || Map.member(node, state.hiddenNodes) || Map.member(node, state.outputNodes) || Map.member(node, state.lpNodes)
    
    public entrypoint isInputNode(node: address) : bool =
        Map.member(node, state.inputNodes)

    public entrypoint isHiddenNode(node: address) : bool =
        Map.member(node, state.hiddenNodes)
    
    public entrypoint isOutputNode(node: address) : bool =
        Map.member(node, state.outputNodes)

    public entrypoint isLpNode(node: address) : bool =
        Map.member(node, state.lpNodes)

    //Get members based on different roles
    public entrypoint getInputNodesWithWeight(): list(address * int) =
        Map.to_list(state.inputNodes)

    public entrypoint getHiddenNodesWithWeight(): list(address * int) =
        Map.to_list(state.hiddenNodes)

    public entrypoint getOutputNodesWithWeight(): list(address * int) =
        Map.to_list(state.outputNodes)

    public entrypoint getLpNodesWithWeight(): list(address * int) =
        Map.to_list(state.lpNodes)

    //Get members weight based on different roles
    public entrypoint getInputNodesWeight(node: address): option(int) =
        switch(Map.lookup(node, state.inputNodes))
            None => None
            Some(x) => Some(x)
    
    public entrypoint getHiddenNodesWeight(node: address): option(int) =
        switch(Map.lookup(node, state.hiddenNodes))
            None => None
            Some(x) => Some(x)

    public entrypoint getOutputNodesWeight(node: address): option(int) =
        switch(Map.lookup(node, state.outputNodes))
            None => None
            Some(x) => Some(x)

    public entrypoint getLpNodesWeight(node: address): option(int) =
        switch(Map.lookup(node, state.lpNodes))
            None => None
            Some(x) => Some(x)

    // Get The TVL of this DAO
    public entrypoint getTVLofDAO() : int =
        Chain.balance(Contract.address)

    public entrypoint getDAOTokenAddress(): address = 
        state.metaInfo.daoTokenAdress

    //Join the DAO as different roles and initialize the weight
    stateful public entrypoint joinAsInputNode(node: address) : bool =
        inputNodeSpareOnly()
        if(isInputNode(node))
            abort("AlreadyInputNode")
        elif (isMember(node))
            responsibilityOverlapOnly()
            put(state{ inputNodes[node] = 10 })
            true
        else
            put(state{ inputNodes[node] = 10 })
            true

    stateful public entrypoint joinAsHiddenNode(node: address) : bool =
        hiddenNodeSpareOnly()
        if(isHiddenNode(node))
            abort("AlreadyHiddenNode")
        elif (isMember(node))
            responsibilityOverlapOnly()
            put(state{ hiddenNodes[node] = 10 })
            true
        else
            put(state{ hiddenNodes[node] = 10 })
            true
    
    stateful public entrypoint joinAsOutputNode(node: address) : bool =
        outputNodeSpareOnly()
        if(isOutputNode(node))
            abort("AlreadyOutputNode")
        elif (isMember(node))
            responsibilityOverlapOnly()
            put(state{ outputNodes[node] = 10 })
            true
        else
            put(state{ outputNodes[node] = 10 })
            true

    stateful public entrypoint joinAsLpNode(node: address) : bool =
        if(isLpNode(node))
            abort("AlreadyLpNode")
        elif (isMember(node))
            put(state{ lpNodes[node] = 10 })
            true
        else
            put(state{ lpNodes[node] = 10 })
            true

    // Users get DAO token by staking AE
    payable stateful public entrypoint stakeToGetDAOToken() : int =
        memberOnly()
        sufficientFundOnly()
        let prevBalance = state.stakers[Call.caller=0]
        put(state{ stakers[Call.caller=0] @balanceBefore = balanceBefore + Call.value })
        let token: DAOToken = Address.to_contract(state.metaInfo.daoTokenAdress)
        token.mint(Call.caller, Call.value*100, protected = true)
        prevBalance*100 + Call.value*100

    stateful public entrypoint burnToGetBackFund(amount: int) : int = 
        memberOnly()
        sufficientStakeOnly(amount)
        let token: DAOToken = Address.to_contract(state.metaInfo.daoTokenAdress)
        switch(token.balance(Call.caller))
            None => abort("No token")
            Some(x) => 
                require(x>=amount, "NotEnoughDeposit")
                token.burnUnderDAO(Call.caller, amount*100)
                Chain.spend(Call.caller, amount)
                put(state{ stakers[Call.caller=0] @balanceBefore = balanceBefore - amount })
                x - amount*100

    record proposal = {
        name: string,
        description: string,
        targetedTokenAddress: address,  // The tokenID to purchase if the proposal passes
        executeBuyAfter: int,
        executeSellAfter: int,
        buyBalance: int,
        sellBalance: int,
        inputVotersDDL: int,
        hiddenVotersDDL: int,
        outputVotersDDL: int,
        totalDeposit: int,
        totalFunds: int,
        totalWeight: int,
        decisionTimeInSeconds: int,
        stage: proposalStage,
        inputVoters: map(address, voteInfo),
        hiddenVoters: map(address, voteInfo),
        outputVoters: map(address, voteForDecision),
        lpFunds: map(address, int)
        }

    //Create a new proposal and deposit on it
    stateful public entrypoint createProposal(_proposalName: string, _proposalDescription: string, _proposalTargetTokenAddress: address, _executeBuyAfter: int, _executeSellAfter: int, _decisionTimeInSeconds: int, _initialDeposit: int) : int =
        inputNodeOnly()
        sufficientDeposotOnly(_initialDeposit)
        let proposalIndex = Map.size(state.proposals)
        let proposal: proposal = {
            name = _proposalName,
            description = _proposalDescription,
            targetedTokenAddress = _proposalTargetTokenAddress,
            executeBuyAfter = _executeBuyAfter,
            executeSellAfter = _executeSellAfter,
            buyBalance = 0,
            sellBalance = 0,
            inputVotersDDL = Chain.timestamp + _decisionTimeInSeconds * 1000,
            hiddenVotersDDL = Chain.timestamp + _decisionTimeInSeconds * 1000 * 2,
            outputVotersDDL = Chain.timestamp + _decisionTimeInSeconds  * 1000 * 3,
            totalDeposit = _initialDeposit,
            totalFunds = 0,
            decisionTimeInSeconds = _decisionTimeInSeconds,
            inputVoters = {},
            hiddenVoters = {},
            outputVoters = {},
            lpFunds = {},
            totalWeight = 0,
            stage = InputDecision
            }
        put(state{ proposals[proposalIndex] = proposal })
        put(state{  proposals[proposalIndex].inputVoters[Call.caller] = {vote = Agree, deposit = _initialDeposit, info="Create"} })
        proposalIndex

    //Vote on Creating a new proposal - collect and verify info by Input Nodes
    stateful public entrypoint voteOnCreatingProposal(proposalIndex: int, _vote: voteOption, _deposit: int, _info: string) : bool =
        inputNodeOnly()
        inputDecisionStageOnly(proposalIndex)
        sufficientDeposotOnly(_deposit)
        let proposal = state.proposals[proposalIndex]
        let currentVoterInfo = proposal.inputVoters[Call.caller = {vote = Agree, deposit=0, info=""}]
        let totalDepositBefore = proposal.totalDeposit
        let totalWeightBefore = proposal.totalWeight
        let weightBefore = state.inputNodes[Call.caller]
        if(currentVoterInfo=={vote = Agree, deposit=0, info=""})
            put(state{ proposals[proposalIndex] @ before = before{totalDeposit = totalDepositBefore + _deposit, totalWeight = totalWeightBefore +  weightBefore}})
            put(state{ proposals[proposalIndex].inputVoters[Call.caller] = {vote = _vote, deposit = _deposit, info=_info} })
            true
        else
            false
    

    //Vote and analyze on the collected info by Hidden Nodes
    stateful public entrypoint voteOnAnalyzeProposal(proposalIndex: int, _vote: voteOption, _deposit: int, _info: string) : bool =
        hiddenNodeOnly()
        hiddenDecisionStageOnly(proposalIndex)
        sufficientDeposotOnly(_deposit)
        let proposal = state.proposals[proposalIndex]
        let currentVoterInfo = proposal.inputVoters[Call.caller = {vote = Agree, deposit=0, info=""}]
        let totalDepositBefore = proposal.totalDeposit
        let totalWeightBefore = proposal.totalWeight
        let weightBefore = state.hiddenNodes[Call.caller]
        if(currentVoterInfo=={vote = Agree, deposit=0, info=""})
            put(state{ proposals[proposalIndex] @ before = before{totalDeposit = totalDepositBefore + _deposit, totalWeight = totalWeightBefore +  weightBefore}})
            put(state{ proposals[proposalIndex].inputVoters[Call.caller] = {vote = _vote, deposit = _deposit, info = _info}})
            true
        else 
            false
        

    //Vote and decide the proposal by Output Nodes
    stateful public entrypoint voteOnDecideProposal(proposalIndex: int, _vote: voteOption, _deposit: int) : bool =
        outputNodeOnly()
        outputDecisionStageOnly(proposalIndex)
        sufficientDeposotOnly(_deposit)
        let proposal = state.proposals[proposalIndex]
        let currentVoterInfo = proposal.outputVoters[Call.caller= {vote = Agree, deposit=0}]
        let totalDepositBefore = proposal.totalDeposit
        let totalWeightBefore = proposal.totalWeight
        let weightBefore = state.outputNodes[Call.caller]
        if(currentVoterInfo=={vote = Agree, deposit=0})
            put(state{ proposals[proposalIndex] @ before = before{totalDeposit = totalDepositBefore + _deposit, totalWeight = totalWeightBefore +  weightBefore}})
            put(state{ proposals[proposalIndex].outputVoters[Call.caller] = {vote = _vote, deposit = _deposit}})
            true
        else 
            false
        

    //Add funds by LP Nodes
    payable stateful public entrypoint addFundsToProposal(proposalIndex: int) : int =
        lpNodeOnly()
        activeProposalOnly(proposalIndex)
        beforeBuyExecutedOnly(proposalIndex)
        sufficientFundOnly()
        let totalFundsBefore = state.proposals[proposalIndex].totalFunds
        let totalWeightBefore = state.proposals[proposalIndex].totalWeight
        let weightBefore = state.lpNodes[Call.caller]
        put(state{proposals[proposalIndex] @ before = before{ totalFunds = totalFundsBefore + Call.value , totalWeight= totalWeightBefore + weightBefore }})   //.
        put(state{proposals[proposalIndex].lpFunds[Call.caller=0] @ fundsBefore = fundsBefore + Call.value})
        state.proposals[proposalIndex].lpFunds[Call.caller=0]
        

    //Calculate Decision Score
    function calculateScore(nodeVoteInfo: (address * voteInfo), nodesWeight: map(address, int)) : int = 
        switch(nodeVoteInfo)
            (_addr, _voteInfo) => 
                switch(_voteInfo.vote)
                    Agree => nodesWeight[_addr=1] * _voteInfo.deposit
                    Against => -nodesWeight[_addr=1] * _voteInfo.deposit
                    _ => 0

    public entrypoint calculateInputVoters(proposalIndex: int) : int = 
        let totalScore: int = 0
        let currentProposalInputVoters: list(address * voteInfo) = Map.to_list(state.proposals[proposalIndex].inputVoters)
        List.foldr(
            (nodeVoteInfo, otherNodeVoteInfo) => calculateScore(nodeVoteInfo, state.inputNodes) + otherNodeVoteInfo, 
            totalScore, 
            currentProposalInputVoters)

    public entrypoint calculateHiddenVoters(proposalIndex: int) : int = 
        let totalScore: int = 0
        let currentProposalHiddenVoters: list(address * voteInfo) = Map.to_list(state.proposals[proposalIndex].hiddenVoters)
        List.foldr(
            (nodeVoteInfo, otherNodeVoteInfo) => calculateScore(nodeVoteInfo, state.hiddenNodes) + otherNodeVoteInfo, 
            totalScore, 
            currentProposalHiddenVoters)

    public entrypoint calculateOutputVoters(proposalIndex: int) : int =
        let totalScore: int = 0
        let currentProposalOutputVoters: list(address * voteForDecision) = Map.to_list(state.proposals[proposalIndex].outputVoters)
        List.foldr(
            (nodeVoteDecision, otherNodeVoteDecision) => calculateOutputScore(nodeVoteDecision, state.outputNodes) + otherNodeVoteDecision, 
            totalScore, 
            currentProposalOutputVoters)

    function calculateOutputScore(nodeVoteInfo: (address * voteForDecision), nodesWeight: map(address, int)) : int = 
        switch(nodeVoteInfo)
            (_addr, _voteDecision) => 
                switch(_voteDecision.vote)
                    Agree => nodesWeight[_addr] * _voteDecision.deposit
                    Against => -nodesWeight[_addr] * _voteDecision.deposit
                    _ => 0


    //Execuete Investment
    stateful entrypoint executeProposalBuy(proposalIndex: int) = 
        afterExecuteBuyTimeOnly(proposalIndex)
        let proposal = state.proposals[proposalIndex]
        investInSwapToken(proposal.targetedTokenAddress, proposal.totalFunds)
        put(state{proposals[proposalIndex] @ before = before{sellBalance = proposal.totalFunds}})

    stateful entrypoint executeProposalSell(proposalIndex: int) = 
        afterExecuteSellTimeOnly(proposalIndex)
        let proposal = state.proposals[proposalIndex]
        let sellAmount: int = sellSwapToken(proposal.targetedTokenAddress)
        put(state{proposals[proposalIndex]@ before = before{sellBalance = sellAmount, stage = Executed}})
        if (proposal.sellBalance < proposal.buyBalance)
            let _lostToken = proposal.buyBalance - proposal.sellBalance
            subReputationToNodes(proposalIndex, _lostToken)
        else
            let _earnedToken = proposal.sellBalance - proposal.buyBalance
            addReputationToNodes(proposalIndex, _earnedToken)

    stateful function subReputationToNodes(proposalIndex: int, _lostToken): unit = 
        let proposal = state.proposals[proposalIndex]
        let currentProposalInputVoters: list(address * voteInfo) = Map.to_list(proposal.inputVoters)
        let token: DAOToken = Address.to_contract(state.metaInfo.daoTokenAdress)
        List.foreach(
            currentProposalInputVoters,
            (nodeVoteInfo) => 
                switch(nodeVoteInfo)
                    (_addr, _voteInfo) => 
                        switch(_voteInfo.vote)
                            Agree => 
                                put(state{ inputNodes[_addr] @prevWeight = prevWeight - _lostToken * _voteInfo.deposit/proposal.totalDeposit })
                                token.transferUnderDAO(Contract.address, _addr , _voteInfo.deposit * state.inputNodes[_addr] / proposal.totalWeight)
                            Against => 
                                put(state{ inputNodes[_addr] @prevWeight = prevWeight + _lostToken * _voteInfo.deposit/proposal.totalDeposit })
                                token.transferUnderDAO(Contract.address, _addr, _voteInfo.deposit)
            )
        let currentProposalHiddenVoters: list(address * voteInfo) = Map.to_list(proposal.hiddenVoters)
        List.foreach(
            currentProposalHiddenVoters,
            (nodeVoteInfo) => 
                switch(nodeVoteInfo)
                    (_addr, _voteInfo) => 
                        switch(_voteInfo.vote)
                            Agree => 
                                put(state{ hiddenNodes[_addr] @prevWeight = prevWeight - _lostToken * _voteInfo.deposit/proposal.totalDeposit })
                                token.transferUnderDAO(Contract.address, _addr , _voteInfo.deposit * state.hiddenNodes[_addr] / proposal.totalWeight)
                            Against => 
                                put(state{ hiddenNodes[_addr] @prevWeight = prevWeight + _lostToken * _voteInfo.deposit/proposal.totalDeposit })
                                token.transferUnderDAO(Contract.address, _addr, _voteInfo.deposit)
            )
        let currentProposalOutputVoters: list(address * voteForDecision) = Map.to_list(proposal.outputVoters)
        List.foreach(
            currentProposalOutputVoters,
            (nodeVoteInfo) => 
                switch(nodeVoteInfo)
                    (_addr, _voteInfo) => 
                        switch(_voteInfo.vote)
                            Agree => 
                                put(state{ outputNodes[_addr] @prevWeight = prevWeight - _lostToken * _voteInfo.deposit/proposal.totalDeposit })
                                token.transferUnderDAO(Contract.address, _addr , _voteInfo.deposit * state.outputNodes[_addr] / proposal.totalWeight)
                            Against => 
                                put(state{ outputNodes[_addr] @prevWeight = prevWeight + _lostToken * _voteInfo.deposit/proposal.totalDeposit })
                                token.transferUnderDAO(Contract.address, _addr, _voteInfo.deposit)
            )
        let currentProposalLpFunds: list(address * int) = Map.to_list(proposal.lpFunds)
        List.foreach(
            currentProposalLpFunds,
            (nodeVoteInfo) => 
                switch(nodeVoteInfo)
                    (_addr, _lpFunds) => 
                        put(state{ lpNodes[_addr] @prevWeight = prevWeight - _lostToken * _lpFunds/proposal.totalDeposit })
                        Chain.spend(_addr, _lpFunds * (proposal.totalFunds - _lostToken)/proposal.totalFunds)
            )

    stateful function addReputationToNodes(proposalIndex: int, _earnedToken) = 
        let proposal = state.proposals[proposalIndex]
        let currentProposalInputVoters: list(address * voteInfo) = Map.to_list(proposal.inputVoters)
        let token: DAOToken = Address.to_contract(state.metaInfo.daoTokenAdress)
        List.foreach(
            currentProposalInputVoters,
            (nodeVoteInfo) => 
                switch(nodeVoteInfo)
                    (_addr, _voteInfo) => 
                        switch(_voteInfo.vote)
                            Agree => 
                                put(state{ inputNodes[_addr] @prevWeight = prevWeight + _earnedToken * _voteInfo.deposit/proposal.totalDeposit })
                                token.transferUnderDAO(Contract.address, _addr , _voteInfo.deposit * state.inputNodes[_addr] / proposal.totalWeight)
                            Against => 
                                put(state{ inputNodes[_addr] @prevWeight = prevWeight - _earnedToken * _voteInfo.deposit/proposal.totalDeposit })
                                token.transferUnderDAO(Contract.address, _addr, _voteInfo.deposit)
            )
        let currentProposalHiddenVoters: list(address * voteInfo) = Map.to_list(proposal.hiddenVoters)
        List.foreach(
            currentProposalHiddenVoters,
            (nodeVoteInfo) => 
                switch(nodeVoteInfo)
                    (_addr, _voteInfo) => 
                        switch(_voteInfo.vote)
                            Agree => 
                                put(state{ hiddenNodes[_addr] @prevWeight = prevWeight + _earnedToken * _voteInfo.deposit/proposal.totalDeposit })
                                token.transferUnderDAO(Contract.address, _addr , _voteInfo.deposit * state.hiddenNodes[_addr] / proposal.totalWeight)
                            Against => 
                                put(state{ hiddenNodes[_addr] @prevWeight = prevWeight - _earnedToken * _voteInfo.deposit/proposal.totalDeposit })
                                token.transferUnderDAO(Contract.address, _addr, _voteInfo.deposit)
            )
        let currentProposalOutputVoters: list(address * voteForDecision) = Map.to_list(proposal.outputVoters)
        List.foreach(
            currentProposalOutputVoters,
            (nodeVoteInfo) => 
                switch(nodeVoteInfo)
                    (_addr, _voteInfo) => 
                        switch(_voteInfo.vote)
                            Agree => 
                                put(state{ outputNodes[_addr] @prevWeight = prevWeight + _earnedToken * _voteInfo.deposit/proposal.totalDeposit })
                                token.transferUnderDAO(Contract.address, _addr , _voteInfo.deposit * state.outputNodes[_addr] / proposal.totalWeight)
                            Against => 
                                put(state{ outputNodes[_addr] @prevWeight = prevWeight - _earnedToken * _voteInfo.deposit/proposal.totalDeposit })
                                token.transferUnderDAO(Contract.address, _addr, _voteInfo.deposit)
            )
        let currentProposalLpFunds: list(address * int) = Map.to_list(proposal.lpFunds)
        List.foreach(
            currentProposalLpFunds,
            (nodeVoteInfo) => 
                switch(nodeVoteInfo)
                    (_addr, _lpFunds) => 
                        put(state{ lpNodes[_addr] @prevWeight = prevWeight + _earnedToken * _lpFunds/proposal.totalDeposit })
                        Chain.spend(_addr, _lpFunds * (proposal.totalFunds + _earnedToken)/proposal.totalFunds)
            )

    
    //Refund to input nodes if proposal is rejected
    stateful entrypoint refundInputVoters(proposalIndex: int): int = 
        rejectedProposalOnly(proposalIndex)
        let proposal = state.proposals[proposalIndex]
        let currentProposalInputVoters: list(address * voteInfo) = Map.to_list(proposal.inputVoters)
        let token: DAOToken = Address.to_contract(state.metaInfo.daoTokenAdress)
        List.foreach(
            currentProposalInputVoters,
            (nodeVoteInfo) => 
                switch(nodeVoteInfo)
                    (_addr, _voteInfo) => 
                        token.transferUnderDAO(Contract.address, _addr, _voteInfo.deposit)
                        put(state{proposals[proposalIndex] @ prev = prev{totalDeposit @ before = before - _voteInfo.deposit}})
                        put(state{proposals[proposalIndex].inputVoters[_addr] @ prev = prev{deposit = 0}})
            )
        proposal.totalDeposit

    //Refund to hidden nodes if proposal is rejected
    stateful entrypoint refundHiddenVoters(proposalIndex: int): int =
        rejectedProposalOnly(proposalIndex)
        let proposal = state.proposals[proposalIndex]
        let currentProposalHiddenVoters: list(address * voteInfo) = Map.to_list(proposal.hiddenVoters)
        let token: DAOToken = Address.to_contract(state.metaInfo.daoTokenAdress)
        List.foreach(
            currentProposalHiddenVoters,
            (nodeVoteInfo) => 
                switch(nodeVoteInfo)
                    (_addr, _voteInfo) => 
                        token.transferUnderDAO(Contract.address, _addr, _voteInfo.deposit)
                        put(state{proposals[proposalIndex] @ prev = prev{totalDeposit @ before = before - _voteInfo.deposit}})
                        put(state{proposals[proposalIndex].hiddenVoters[_addr] @ prev = prev{deposit = 0}})
            )
        proposal.totalDeposit

    //Refund to output nodes if proposal is rejected
    stateful entrypoint refundOutputVoters(proposalIndex: int): int =
        rejectedProposalOnly(proposalIndex)
        let proposal = state.proposals[proposalIndex]
        let currentProposalOutputVoters: list(address * voteForDecision) = Map.to_list(proposal.outputVoters)
        let token: DAOToken = Address.to_contract(state.metaInfo.daoTokenAdress)
        List.foreach(
            currentProposalOutputVoters,
            (nodeVoteInfo) => 
                switch(nodeVoteInfo)
                    (_addr, _voteInfo) => 
                        token.transferUnderDAO(Contract.address, _addr, _voteInfo.deposit)
                        put(state{proposals[proposalIndex] @ prev = prev{totalDeposit @ before = before - _voteInfo.deposit}})
                        put(state{proposals[proposalIndex].outputVoters[_addr] @ prev = prev{deposit = 0}})
            )
        proposal.totalDeposit

    //Refund to lp nodes if proposal is rejected
    stateful entrypoint refundLpNodes(proposalIndex: int): int =
        rejectedProposalOnly(proposalIndex)
        let proposal = state.proposals[proposalIndex]
        let currentProposalLpFunds: list(address * int) = Map.to_list(proposal.lpFunds)
        List.foreach(
            currentProposalLpFunds,
            (nodeVoteInfo) => 
                switch(nodeVoteInfo)
                    (_addr, _lpFunds) => 
                        Chain.spend(_addr, _lpFunds)
                        put(state{proposals[proposalIndex] @ prev = prev{totalFunds @ before = before - _lpFunds}})
                        put(state{proposals[proposalIndex].lpFunds[_addr] = 0})
            )
        proposal.totalFunds

    stateful function setRejectStage(proposalIndex) = 
        put(state{proposals[proposalIndex] @ prev = prev{stage = Rejected}})
    
    //Get current stage of the proposal
    stateful entrypoint getCurrentStage(proposalIndex : int) : proposalStage =
        let currentTimestamp = Chain.timestamp
        let currentProposal = state.proposals[proposalIndex]
        if(currentProposal.stage == Rejected || currentProposal.stage == Executed)
            currentProposal.stage
        elif (currentProposal.inputVotersDDL > currentTimestamp)
            InputDecision
        elif (currentProposal.hiddenVotersDDL > currentTimestamp)
            let inputScore = calculateInputVoters(proposalIndex)
            if(inputScore >= 0)
                HiddenDecision
            else
                setRejectStage(proposalIndex)
                Rejected
        elif (currentProposal.outputVotersDDL > currentTimestamp) 
            let hiddenScore = calculateHiddenVoters(proposalIndex)
            if(hiddenScore >= 0)
                OutputDecision
            else
                setRejectStage(proposalIndex)
                Rejected
        elif (currentProposal.executeBuyAfter > currentTimestamp) 
            let outputScore = calculateOutputVoters(proposalIndex)
            if(outputScore >= 0)
                WaitForBuyStart
            else
                setRejectStage(proposalIndex)
                Rejected
        elif (currentProposal.executeBuyAfter < currentTimestamp && currentProposal.buyBalance == 0) 
            let outputScore = calculateOutputVoters(proposalIndex)
            if(outputScore >= 0)
                ExecuteBuy
            else
                setRejectStage(proposalIndex)
                Rejected
        elif (currentProposal.buyBalance != 0 && currentProposal.executeSellAfter > currentTimestamp) 
            WaitForSellStart
        elif (currentProposal.executeSellAfter < currentTimestamp) 
            ExecuteSell
        else 
            Executed

    stateful function investInSwapToken(_tokenAddress: address, _amount: int) : int =
        let investmentSwapAgent: Swap = Address.to_contract(state.investmentSwapService)
        investmentSwapAgent.convertAeToTokens(_tokenAddress, value = _amount)

    function sellSwapToken(_tokenAddress: address) : int =
        let investmentSwapAgent: Swap = Address.to_contract(state.investmentSwapService)
        let token: DAOToken = Address.to_contract(_tokenAddress)
        let tokenBalance = token.balance(Contract.address)
        switch(tokenBalance)
            None=> abort("Token balance is none")
            Some(balance) => 
                token.create_allowance(state.investmentSwapService, balance)
                investmentSwapAgent.convertTokensToAe(_tokenAddress, balance)

    function checkTokenPairExists(_tokenAddress: address) : bool =
        let investmentSwapAgent: Swap = Address.to_contract(state.investmentSwapService)
        investmentSwapAgent.checkPairExists(_tokenAddress)