@compiler >= 6

include "List.aes"
include "./DEXInterface.aes"


contract Swap = 
    record state = {
        dexRouterAddress: address,
        dexFactoryAddress: address,
        factoryAddress: address
        }

    entrypoint init(_factoryAddress: address) = {
        factoryAddress = _factoryAddress,
        dexFactoryAddress = ak_NhbxN8wg8NLkGuzwRNDQhMDKSKBwDAQgxQawK7tkigi2aC7i9, //testnet, main:ct_2mfj3FoZxnhkSw5RZMcP8BfPoB1QR4QiYGNCdkAvLZ1zfF6paW
        dexRouterAddress = ak_MLXQEP12MBn99HL6WDaiTqDbG4bJQ3Q9Bzr57oLfvEkghvpFb //testnet , main:ct_azbNZ1XrPjXfqBqbAh1ffLNTQ1sbnuUDFvJrXjYz7JQA1saQ3
        }

    function factoryAddressOnly() = 
        require(state.factoryAddress == Call.caller, "Only factory can call this function")


    payable stateful entrypoint convertAeToTokens(targetedTokenAddress: address): int = 
        let dexRouter : IAedexV2Router = Address.to_contract(state.dexRouterAddress)
        let token : IAEX9Minimal = Address.to_contract(targetedTokenAddress)
        let amountOutorNot = List.last(dexRouter.get_amounts_out(Call.value, [dexRouter.wae_aex9(), token]))
        switch(amountOutorNot)
            None => abort("No amount returned")
            Some(amountOut) => 
                let deadline = Chain.timestamp + 1000 * 15
                let path = [dexRouter.wae_aex9(), token]
                let dexRouter = Address.to_contract(state.dexRouterAddress)
                let result = dexRouter.swap_exact_ae_for_tokens(amountOut, path, Call.caller, deadline, None)
                switch(List.last(result))
                    None => abort("No result returned")
                    Some(x) => x

    payable stateful entrypoint convertTokensToAe(targetedTokenAddress: address, amount: int): int =
        let dexRouter : IAedexV2Router = Address.to_contract(state.dexRouterAddress)
        let token : IAEX9Minimal = Address.to_contract(targetedTokenAddress)
        token.transfer_allowance(Call.caller, Contract.address, amount)
        token.create_allowance(dexRouter.address, amount)
        let amountOutorNot = List.last(dexRouter.get_amounts_out(amount, [token, dexRouter.wae_aex9()]))
        switch(amountOutorNot) 
            None => abort("No amount returned")
            Some(amountOut) =>
                let deadline = Chain.timestamp + 1000 * 15
                let path = [token, dexRouter.wae_aex9()]
                let dexRouter = Address.to_contract(state.dexRouterAddress)
                let result = dexRouter.swap_exact_tokens_for_ae(amount, amountOut, path, Call.caller, deadline, None)
                switch(List.last(result))
                    None => abort("No result returned")
                    Some(z) => z

    entrypoint getEstimatedReceivedToken(amount: int, targetedTokenAddress: address) :int = 
        let dexRouter : IAedexV2Router = Address.to_contract(state.dexRouterAddress)
        let token : IAEX9Minimal = Address.to_contract(targetedTokenAddress)
        let amount = List.last(dexRouter.get_amounts_out(amount, [dexRouter.wae_aex9(), token]))
        switch(amount)
            None => abort("No amount returned")
            Some(x) => x

    entrypoint getEstimatedReceivedAe(amount: int, targetedTokenAddress: address) :int =
        let dexRouter : IAedexV2Router = Address.to_contract(state.dexRouterAddress)
        let token : IAEX9Minimal = Address.to_contract(targetedTokenAddress)
        let amount = List.last(dexRouter.get_amounts_out(amount, [token, dexRouter.wae_aex9()]))
        switch(amount)
            None => abort("No amount returned")
            Some(x) => x

    // Check if a pair exists
    entrypoint checkPairExists(_tokenAddress: address): bool =
        let tokenAddress: IAEX9Minimal = Address.to_contract(_tokenAddress)
        let dexFactory : IAedexV2Factory = Address.to_contract(state.dexFactoryAddress)
        let dexRouter : IAedexV2Router = Address.to_contract(state.dexRouterAddress)
        switch(dexFactory.get_pair(tokenAddress, dexRouter.wae_aex9()))
            None => false
            Some(_) => true





    

    



